# GitHub Actions 에서 수행할 워크플로우 이름
name: Build, Push, and Update Deployment
    
# 워크플로우를 트리거하는 이벤트 정의
# 이 워크플로우는 main 브랜치에 대한 푸시 이벤트 또는 main 브랜치로의 풀 리퀘스트 이벤트가 발생할 때마다 트리거된다.
on:  
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  GITOPS_PATH: dev/inkcloud-front

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      # GitOps repo 미리 체크아웃 (env 추출용)
      - name: Checkout GitOps repo
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.GITOPS_REPO }}
          token: ${{ secrets.PAT }}
          path: gitops-repo

      - name: Install yq for YAML editing
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      # values.yaml에서 env 추출 (반드시 Docker build 전에!)
      - name: Extract env from values.yaml
        id: envs
        run: |
          echo "REACT_APP_KEYCLOAK_TOKEN_URL=$(yq '.env.REACT_APP_KEYCLOAK_TOKEN_URL' gitops-repo/$GITOPS_PATH/values.yaml)" >> $GITHUB_ENV
          echo "REACT_APP_KEYCLOAK_CLIENT_ID=$(yq '.env.REACT_APP_KEYCLOAK_CLIENT_ID' gitops-repo/$GITOPS_PATH/values.yaml)" >> $GITHUB_ENV
          echo "REACT_APP_STORE_ID=$(yq '.env.REACT_APP_STORE_ID' gitops-repo/$GITOPS_PATH/values.yaml)" >> $GITHUB_ENV
          echo "REACT_APP_CHANNEL_ID=$(yq '.env.REACT_APP_CHANNEL_ID' gitops-repo/$GITOPS_PATH/values.yaml)" >> $GITHUB_ENV
          echo "REACT_APP_PREFIX_URL=$(yq '.env.REACT_APP_PREFIX_URL' gitops-repo/$GITOPS_PATH/values.yaml)" >> $GITHUB_ENV

      # React 앱 빌드 (CI=false로 경고 무시)
      - name: Build React app
        run: CI=false npm run build

      # AWS 인증 & ECR 로그인
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # Docker 빌드/푸시 (한 번만!)
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: inkcloud-front
          IMAGE_TAG: ${{ github.sha }}
          REACT_APP_KEYCLOAK_TOKEN_URL: ${{ env.REACT_APP_KEYCLOAK_TOKEN_URL }}
          REACT_APP_KEYCLOAK_CLIENT_ID: ${{ env.REACT_APP_KEYCLOAK_CLIENT_ID }}
          REACT_APP_STORE_ID: ${{ env.REACT_APP_STORE_ID }}
          REACT_APP_CHANNEL_ID: ${{ env.REACT_APP_CHANNEL_ID }}
          REACT_APP_PREFIX_URL: ${{ env.REACT_APP_PREFIX_URL }}
          REACT_APP_KEYCLOAK_CLIENT_SECRET: ${{ secrets.REACT_APP_KEYCLOAK_CLIENT_SECRET }}
          REACT_APP_V2_API_SECRET: ${{ secrets.REACT_APP_V2_API_SECRET }}
          REACT_APP_V2_WEBHOOK_SECRET: ${{ secrets.REACT_APP_V2_WEBHOOK_SECRET }}
        run: |
          docker build \
            --build-arg REACT_APP_KEYCLOAK_TOKEN_URL=$REACT_APP_KEYCLOAK_TOKEN_URL \
            --build-arg REACT_APP_KEYCLOAK_CLIENT_ID=$REACT_APP_KEYCLOAK_CLIENT_ID \
            --build-arg REACT_APP_STORE_ID=$REACT_APP_STORE_ID \
            --build-arg REACT_APP_CHANNEL_ID=$REACT_APP_CHANNEL_ID \
            --build-arg REACT_APP_PREFIX_URL=$REACT_APP_PREFIX_URL \
            --build-arg REACT_APP_KEYCLOAK_CLIENT_SECRET=$REACT_APP_KEYCLOAK_CLIENT_SECRET \
            --build-arg REACT_APP_V2_API_SECRET=$REACT_APP_V2_API_SECRET \
            --build-arg REACT_APP_V2_WEBHOOK_SECRET=$REACT_APP_V2_WEBHOOK_SECRET \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 이미지 태그 업데이트
      - name: Update image tag in values.yaml
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: inkcloud-front
        run: |
          cd gitops-repo/$GITOPS_PATH
          IMAGE_TAG="$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}"
          yq -i ".app.image = \"${IMAGE_TAG}\"" values.yaml

      - name: Commit and push changes to GitOps repo
        run: |
          cd gitops-repo
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Update image tag to $IMAGE_TAG"
          git push origin main
